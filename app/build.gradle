apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

static def getProperty(String filename, String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(filename))
    return properties.getProperty(property)
}

static def quoted(String value) {
    return"\"${value}\""
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "edu.cnm.deepdive.dungeonrunclient"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def connection_properties = "$projectDir/../../../services/dungeonrun.properties"

        buildConfigField "String", "CLIENT_ID", quoted(
                getProperty(connection_properties, "client_id")
        )
        buildConfigField "String", "BASE_URL", quoted(
                getProperty(connection_properties, "base_url")
        )
        buildConfigField "String", "CONTENT_FORMAT", quoted(
                getProperty(connection_properties, "content_format")
        )
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //noinspection GroovyAssignabilityCheck
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //Basic Android Jetpack support
    implementation 'androidx.core:core:1.3.2'
    implementation 'androidx.media:media:1.3.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    implementation 'com.google.android.material:material:1.3.0'

    // Basic Android UI components
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def recyclerViewVersion = '1.1.0'
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.recyclerview:recyclerview-selection:$recyclerViewVersion"

    // Preferences/settings library
    implementation 'androidx.preference:preference:1.1.1'

    // Fragment navigation
    implementation 'androidx.fragment:fragment:1.3.1'
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"

    //Google Sign-in dependency
    implementation 'com.google.android.gms:play-services-auth:19.0.0'

    //Gson (Google JSON) dependency
    implementation 'com.google.code.gson:gson:2.8.6'

    //ReactiveX libraries
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //Retrofit (REST client) with ReactiveX & Gson integration
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    // OkHttp logging dependency
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    compileOnly 'com.google.android.wearable:wearable:2.5.0'

}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc."
}

android.applicationVariants.all { variant ->
    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
        title "Roulette (${project.android.defaultConfig.versionName})"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i}

        doFirst {
            classpath = project.files(
                    project.file(projectDir).toPath().resolve(
                            "build/intermediates/javac/${variant.name}/classes"),

                    variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath(),
            )
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        options {
            windowTitle = "Roulette (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
            author = false
            links 'https://docs.oracle.com/javase/8/docs/api/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
        }

        failOnError true
    }

    task.dependsOn "assemble${variant.name.capitalize()}"
    generateApiDoc.dependsOn task
}